generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum DocumentType {
  CPF
  RG
  PASSAPORTE
}

model Customer {
  id               String   @id @default(uuid())
  name             String
  socialName       String
  birthDate        DateTime
  registrationDate DateTime
  createdAt        DateTime @default(now())

  cellphones    Cellphone[]
  documents     Document[]
  address       Address?
  dependents    Customer[]      @relation("CustomerDependents")
  guardian      Customer?       @relation("CustomerDependents", fields: [guardianId], references: [id], onDelete: Cascade)
  guardianId    String?
  Hostings      Hosting[]

  @@map("customers")
}

model Address {
  id           String @id @default(uuid())
  street       String
  neighborhood String
  city         String
  state        String
  country      String
  zipcode      String

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @unique

  @@map("addresses")
}

model Cellphone {
  id     String @id @default(uuid())
  ddd    String
  number String

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String

  @@map("cellphones")
}

model Document {
  id             String       @id @default(uuid())
  number         String
  type           DocumentType
  expeditionDate DateTime

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String

  @@map("documents")
}

model Accommodation {
  id                 String     @id @default(uuid())
  name               String
  singleBeds         Int
  coupleBeds         Int
  suites             Int
  garages            Int
  hasAirConditioning Boolean
  createdAt          DateTime   @default(now())
  QuantityAvailable  Int        @default(0)
  Hostings           Hosting[]

  @@map("accommodations")
}

model Hosting {
  id              String         @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime       @default(now())
  customer        Customer?      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId      String?
  accommodation   Accommodation? @relation(fields: [accommodationId], references: [id], onDelete: NoAction)
  accommodationId String?
}
